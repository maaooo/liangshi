最后的命令行
./turnserver -c ./turnserver.conf -b ./turnuserdb.conf -v -a -r "p2p.liangshiyy.com"&


turnserver -v --syslog -L 0.0.0.0 -L ::1 -E 0.0.0.1 -E ::1 --max-bps=3000000 -f -m 3 --min-port=32355 --max-port=65535 --no-tls --no-dtls --no-auth 
turnserver -v --syslog -L 0.0.0.0 -L ::1 -E 0.0.0.1 -E ::1 --max-bps=3000000 -f -m 3 --min-port=32355 --max-port=65535 --no-auth 

turnserver --syslog -a -L 0.0.0.0 --max-bps=3000000 -f -m 10 --min-port=32355 --max-port=65535 --user= --user=marvin:0x5f4e116720a8904134563a4828ce10b7 -r north.gov  --cert=turn_server_cert.pem --pkey=turn_server_pkey.pem

turnserver --syslog -a -L 127.0.0.1 -E 127.0.0.1 --max-bps=3000000 -f -m 10 --min-port=32355 --max-port=65535 --user= --user=marvin:0x5f4e116720a8904134563a4828ce10b7 -r north.gov --cert=turn_server_cert.pem --pkey=turn_server_pkey.pem --no-stun
turnserver --syslog -a -L 114.215.207.51 -E 114.215.207.51 --max-bps=3000000 -f -m 10 --min-port=32355 --max-port=65535 --user= --user=marvin:0x5f4e116720a8904134563a4828ce10b7 -r north.gov  --cert=turn_server_cert.pem --pkey=turn_server_pkey.pem

turnserver --syslog -L 114.215.207.51 -E 114.215.207.51 --max-bps=3000000 -f -m 10 --min-port=32355 --max-port=65535 -r north.gov  --cert=turn_server_cert.pem --pkey=turn_server_pkey.pem --no-auth 

turnserver -o -X 23.23.238.173 --no-tls --no-dtls -a -b turnuserdb.conf -f -r myrealm

turnutils_uclient -t -p 3478 -u [myuser ]-w [mypass] 203.112.63.107

mkdir /etc/turnserver
cp examples/etc/turnserver.conf /etc/turnserver/
vim /etc/turnserver/turnserver.conf
#修改监听端口为33478
#启动turnserver
turnserver -v -o -z -c /etc/turnserver/turnserver.conf
./turnserver -v -o -z -c ./turnserver.conf

./turnserver -c ./turnserver.conf -b ./turnuserdb.conf -v -a -o -r "p2p.liangshiyy.com"

--tls-listening-port	


turnserver application: a TURN relay server implementation
Usage:
       $ turnserver [flags] [-n | -c <config-file>] [ --userdb=<userdb-file> | --psql-userdb=<db-conn-string> | --mysql-userdb=<db-conn-string> ] [options]
       $ turnserver -h
Flags:
-v, --verbose 'Moderate' verbose mode.
-V, --Verbose 'Extra' verbose mode, very annoying and not recommended.
-o, --daemon Run server process as daemon.
-f, --fingerprint Use fingerprints in the TURN messages. If an incoming request contains fingerprint, then TURN server will always add fingerprints to the messages in this session, regardless of the per-server setting.
-a, --lt-cred-mech Use long-term credentials mechanism (this one you need for WebRTC usage). This option can be used with either flat file user database or PostgreSQL or MySQL or Redis DB for user keys storage.
-A, --st-cred-mech Use short-term credentials mechanism. This option requires a PostgreSQL or MySQL or Redis DB for short term passwords storage.
-z, --no-auth Do not use any credentials mechanism, allow anonymous access. Opposite to -a and -A options.
--use-auth-secret TURN REST API flag. Flag that sets a special  authorization option that is based upon authentication secret. This feature purpose is to support "TURN Server REST API" as described in TURNServerRESTAPI.pdf in the docs. This option can be used with long-term credentials mechanism only - it does not make much sense with the short-term mechanism.
--dh566	Use 566 bits DH TLS key. Default size of the key is 1066.
--dh2066	Use 2066 bits DH TLS key. Default size of the key is 1066.
--no-sslv2 Do not allow SSLv2 protocol.
--no-sslv3 Do not allow SSLv3 protocol.
--no-tlsv1 Do not allow TLSv1 protocol.
--no-tlsv1_1 Do not allow TLSv1.1 protocol.
--no-tlsv1_2 Do not allow TLSv1.2 protocol.
--no-udp Do not start 'plain' UDP listeners.
--no-tcp Do not start 'plain'TCP listeners.
--no-tls Do not start TLS listeners.
--no-dtls Do not start DTLS	listeners. This is recommended when you do not need DTLS. With this option, the plain UDP works faster.
--no-udp-relay Do not allow UDP relay endpoints defined in RFC 5766, use only TCP relay endpoints as defined in RFC 6062.
--no-tcp-relay Do not allow TCP relay endpoints defined in RFC 6062, use only UDP relay endpoints as defined in RFC 5766.
--stale-nonce Use extra security with nonce value having limited lifetime (600 secs).
--no-stdout-log Flag to prevent stdout log messages. By default, all log messages are going to both stdout and to the configured log. With this option everything will be going to the configured log file only (unless the log file itself is stdout).
--syslog Flag to redirect everything into the system log (syslog).
--simple-log This flag means that no log file rollover will be used, and the log file name will be constructed as-is, without PID and date appendage.
--no-loopback-peers Disallow peers on the loopback addresses (127.x.x.x and ::1).
--no-multicast-peers Disallow peers on well-known broadcast addresses (224.0.0.0 and above, and FFXX:*).
--udp-self-balance (recommended for older Linuxes only) balance the UDP traffic among the aux endpoints (for clients supporting 300 ALTERNATE-SERVER response). See --aux-server option.
--secure-stun	Require authentication of the STUN Binding request. By default, the clients are allowed anonymous access to the STUN Binding functionality.
-S, --stun-only Run as STUN server only, all TURN requests will be ignored. Option to suppress TURN functionality, only STUN requests will be processed.
--no-stun	Run as TURN server only, all STUN requests will be ignored. Option to suppress STUN functionality, only TURN requests will be processed.
--sha256	Require SHA256 digest function to be used for the message integrity. By default, the server uses SHA1 hashes. With this option, the server requires the stronger SHA256 hashes. The client application must support SHA256 hash function if this option is used. If the server obtains a message from the client with a weaker (SHA1) hash function then the server returns error code 426.
--mobility Mobility with ICE (MICE) specs support.
--no-cli Turn OFF the CLI support. By default it is always ON, and the process turnserver accepts the telnet client connections on IP address 127.0.0.1, port 5766. See also options --cli-ip, --cli-port and --cli-password.
--server-relay Server relay. NON-STANDARD AND DANGEROUS OPTION. Only for an application that want to run a server on the relay endpoints. This option eliminates the IP permissions check on the packets incoming to the relay endpoints. That makes the system vulnerable to DOS attack, for example, among other bad things. The rule is: if you do not understand what is this option about and why would you need it, then you absolutely must NOT use it under any circumstances. See http://tools.ietf.org/search/rfc5766#section-17.2.3 .
-h Help.
Config file setting:
-n Do not use configuration file, use only command line parameters.
-c <file-name> Configuration file name (default - turnserver.conf). The	format of config file can be seen in the supplied examples/etc/turnserver.conf example file. Long names of the options are used as the configuration items names in the file. If not an absolute path is supplied, then the file is searched in the following	directories:
current directory
current directory etc/	subdirectory
upper directory level etc/
/etc/
/usr/local/etc/
User database settings:
-b, --userdb <file-name>
'Dynamic'	user database file name	(default - turnuserdb.conf),
for long-term credentials mechanism only.
This user database is	being dynamically checked while the turnserver is working, and the user accounts can be changed dynamically by editing the file.
-e, --psql-userdb, --sql-userdb <connection-string>
User database connection string for PostgreSQL.
This database can be used for long-term and short-term credentials mechanisms, and it can store the secret value for secret-based timed authentication in TURN RESP API. The connection string format is like that:
"host=<host> dbname=<dbname> user=<db-user> password=<db-user-password> connect_timeout=<seconds>"
(for 8.x or newer Postgres), or:

"postgresql://username:password@hostname:port/databasename"
(for 9.x or newer Postgres). See the INSTALL file for more explanations and examples.
Also, see http://www.PostgreSQL.org for full PostgreSQL documentation.
-M, --mysql-userdb <connection-string>
User database connection string for MySQL.
This database can be used for long-term and short-term credentials mechanisms, and it can store the secret value for secret-based timed authentication in TURN RESP API. The (proprietary) connection string format is like this:
"host=<host> dbname=<dbname> user=<db-user> password=<db-user-password> connect_timeout=<seconds>".
See the INSTALL file for more explanations and examples.
Also, see http://www.mysql.org for full MySQL documentation.
-N, --redis-userdb <connection-string>
User database connection string for Redis.
This database can be used for long-term and short-term credentials mechanisms, and it can store the secret value for secret-based timed authentication in TURN RESP API. The (proprietary) connection string format is like this:
"ip=<ip-addr> dbname=<number> password=<db-password> connect_timeout=<seconds>".
See the INSTALL file for more explanations and examples.
Also, see http://redis.io for full Redis documentation.
Options:
-d, --listening-device <device-name> NOT RECOMMENDED, USE IT ONLY AS A LAST RESORT OPTIMIZATION & SECURITY OPTION, FOR LINUX SYSTEMS ONLY. Listener interface device. The turnserver process must have root privileges to bind the	listening endpoint to a device. If turnserver must run as a	process without root privileges, then just do not use this setting.
-L, --listening-ip <ip> Listener IP address of relay server. Multiple listeners can be specified. If no IP(s) specified, then all IPv4 and IPv6 system IPs will be used for listening.
-p, --listening-port <port> TURN listener port for UDP and TCP listeners (Default: 3478). Note: actually, TLS & DTLS sessions can connect to the "plain" TCP & UDP port(s), too - if allowed by configuration. For example, the default listening port can be set to 80 or 443, to go around some strict NATs. Remember that ports < 1024 may require superuser privileges to start the turnserver process.
--tls-listening-port <port> TURN listener port for TLS and DTLS listeners (Default: 5349). Note: actually, "plain" TCP & UDP sessions can connect to the TLS & DTLS port(s), too - if allowed by configuration. For example, the default tls listening port can be set to 443, to go around some strict NATs. Remember that ports < 1024 may require superuser privileges to start the turnserver process. For secure TCP connections, we currently support SSL version 3 and TLS versions 1.0, 1.1, 1.2. SSL2 "encapsulation mode" is also supported. For secure UDP connections, we support DTLS version 1.
--alt-listening-port <port> Alternative listener port for UDP and TCP listeners; default (or zero) value means "listening port plus one". This is needed for CHANGE_REQUEST attribute in STUN NAT behavior discovery functionality, like one defined in STUN RFC 3489 or in RFC 5780. The STUN/TURN Server supports CHANGE_REQUEST only if it is started with more than one listening IP address of the same family (IPv4 or IPv6). If only single IP address is used, then the CHANGE_REQUEST attribute in BINDING request will be rejected.
--alt-tls-listening-port <port> Alternative listener port for TLS and DTLS listeners; default (or zero) value means "TLS listening port plus one".
--aux-server <IPv4:port>|<[IPv6]:port>	Auxiliary STUN/TURN server listening endpoint. Aux servers have almost full TURN and STUN functionality. The (minor) limitations are:
Auxiliary servers do not have alternative ports and they do not support STUN RFC 5780 functionality (CHANGE REQUEST).
Auxiliary servers also are never returning ALTERNATIVE-SERVER reply.
Valid formats are 1.2.3.4:5555 for IPv4 and [1:2::3:4]:5555 for IPv6. There may be multiple aux-server options, each will be used for listening to client requests.

-i, --relay-device <device-name> NOT RECOMMENDED, USE IT ONLY AS A LAST RESORT OPTIMIZATION & SECURITY OPTION, FOR LINUX SYSTEMS ONLY. Relay interface device to be used for the relay sockets.
-E, --relay-ip <ip> Relay address (the local IP address that will be used to relay the packets to the peer).	Multiple relay addresses may be used. The same IP(s) can be used as both listening IP(s) and relay IP(s). If no relay IP(s) specified, then the turnserver will apply the default policy (since v3.2.2.2): it will decide itself which relay addresses to be used, and it will always be using the client socket IP address as the relay IP address of the TURN session (if the requested relay address family is the same as the family of the client socket).
-X, --external-ip <public-ip>[/private-ip] TURN Server public/private address mapping, if the server is behind NAT. In that situation, if a -X is used in form "-X <ip>" then that ip will be reported as relay IP address of all allocations. This scenario works only in a simple case when one single relay address is be used, and no CHANGE_REQUEST STUN functionality is required. That single relay address must be mapped by NAT to the 'external' IP. The "external-ip" value, if not empty, is returned in XOR-RELAYED-ADDRESS field. For that 'external' IP, NAT must forward ports directly (relayed port 12345 must be always mapped to the same 'external' port 12345). In more complex case when more than one IP address is involved, that option must be used several times, each entry must have form "-X <public-ip/private-ip>", to map all involved addresses. CHANGE_REQUEST NAT discovery STUN functionality will work correctly, if the addresses are mapped properly, even when the TURN server itself is behind A NAT. By default, this value is empty, and no address mapping is used.
-m, --relay-threads <number> Number of relay threads to handle the established connections (in addition to authentication thread and the listener thread). If set to 0 then application handles that traffic in a single thread. The default thread number is the number of CPUs. In older Linux systems (before Linux kernel 3.9), the number of UDP threads is always one threads per network listening endpoint - including the auxiliary endpoints.
--min-port <port> Lower bound of the UDP port range	for relay endpoints allocation. Default value is 49152, according to RFC 5766.
--max-port <port> Upper bound of	the UDP	port range for relay endpoints allocation. Default value is 65535, according to RFC 5766.
-u, --user <user:password> or <user:0xkey> Long-term credentials user account, in the column-separated form 'username:key'. Multiple user accounts can be used in the command line. The key is either the	user password, or the key is generated by turnadmin command. In the second case, the key must be prepended with '0x' symbols. The key is calculated over the user name, the realm, and the user password. So, if the realm has been changed, then all user keys in the database have to be re-set. This option cannot be used with TURN REST API.
-r, --realm <realm> Realm to be used for all users, with long term credentials or with TURN REST API.
-q, --user-quota <number> Per-user allocation quota: how many concurrent allocations a user can create.
-Q, --total-quota <number> Total allocations quota: global limit on concurrent allocations.
--static-auth-secret <secret> Static authentication secret value (a string), for TURN REST API. If not set, then the turn server will try to use the 'dynamic' value in turn_secret table in user database (if present). The database-stored value can be changed on-the-fly by a separate program, so this is why that other mode is 'dynamic'. Multiple shared secrets can be used (both in the database and in the "static" fashion).
-s, --max-bps <number> Max bytes-per-second bandwidth a TURN session is allowed to handle (input and output network streams are treated separately). Anything above that limit will be dropped or temporary suppressed (within the available buffer limits).
--cert <file-name> Certificate file, PEM format. Same file search rules applied as for the configuration file. If both --no-tls and --no-dtls options are specified, then this parameter is not needed. Default value is turn_server_cert.pem.
--pkey <file-name> Private key file, PEM format. Same file search rules applied as for the configuration file. If both --no-tls and --no-dtls options are specified, then this parameter is not needed. Default value is turn_server_pkey.pem.
--pkey-pwd <private-key-password> Private key file password, if the key is encrypted.
--CA-file	CA file in OpenSSL format. Forces TURN server to verify the client SSL certificates. By default, no CA is set and no client certificate check is performed.
--dh-file	Use custom DH TLS key, stored in PEM format in the file. Flags --dh566 and --dh2066 are ignored when the DH key is taken from a file.
--cipher-list	Allowed OpenSSL cipher list for TLS/DTLS connections. Default value is "DEFAULT".
--ec-curve-name <curve-name> Curve name for EC ciphers, if supported by OpenSSL library (TLS and DTLS). The default value is prime256v1.
-l, --log-file <file-name> or "stdout" or "syslog" Option to set the full path name of the log file. By default, the turnserver tries to open a log file in /var/log, /var/tmp, /tmp and current directories directories (which open operation succeeds first that file will be used). With this option you can set the definite log file name. The special names are "stdout" and "-" - they will force everything to the stdout. Also, the file name "syslog" will redirect everything into the system log (syslog) as if the option --syslog was set.
--alternate-server <ip:port> Option to set the "redirection" mode. The value of this option will be the address of the alternate server for UDP & TCP service in form of <ip>[:<port>]. The server will send this value in the attribute ALTERNATE-SERVER, with error 300, on ALLOCATE request, to the client. Client will receive only values with the same address family as the client network endpoint address family. See RFC 5389 and RFC 5766 for ALTERNATE-SERVER functionality description. The client must use the obtained IP value for subsequent TURN communications. If more than one --alternate-server options are provided, then the functionality can be more accurately described as "load-balancing" than a mere "redirection". If the port number is omitted, then the default port number 3478 for the UDP/TCP protocols will be used. Colon (:) characters in IPv6 addresses may conflict with the syntax of the option. To alleviate this conflict, literal IPv6 addresses are enclosed in square brackets in such resource identifiers, for example: [2001:db8:85a3:8d3:1319:8a2e:370:7348]:3478 . Multiple alternate servers can be set. They will be used in the round-robin manner. All servers in the pool are considered of equal weight and the load will be distributed equally. For example, if we have 4 alternate servers, then each server will receive 25% of ALLOCATE requests. A alternate TURN server address can be used more than one time with the alternate-server option, so this can emulate "weighting" of the servers.
--tls-alternate-server <ip:port>	Option to set alternative server for TLS & DTLS services in form of <ip>[:<port>]. If the port number is omitted, then the default port number 5349 for the TLS/DTLS protocols will be used. See the previous option for the functionality description.
-C, --rest-api-separator <symbol>	This is the timestamp/username separator symbol (character) in TURN REST API. The default value is colon (':').
-O, --redis-statsdb	<connection-string>	Redis status and statistics database connection string, if used (default - empty, no Redis stats DB used). This database keeps allocations status information, and it can be also used for publishing and delivering traffic and allocation event notifications. The connection string has the same parameters as redis-userdb connection string.
--max-allocate-timeout <seconds>	Max time, in seconds, allowed for full allocation establishment. Default is 60 seconds.
--denied-peer-ip=<IPaddr[-IPaddr]>, --allowed-peer-ip=<IPaddr[-IPaddr]> Options to ban or allow specific ip addresses or ranges of ip addresses. If an ip address is specified as both allowed and denied, then the ip address is considered to be allowed. This is useful when you wish to ban a range of ip addresses, except for a few specific ips within that range. This can be used when you do not want users of the turn server to be able to access machines reachable by the turn server, but would otherwise be unreachable from the internet (e.g. when the turn server is sitting behind a NAT). The allowed/denied addresses (white/black lists) functionality is very simple:
If there is no rule for an address, then it is allowed;
If there is an explicit allowed rule that fit an address then it is allowed - no matter what;
If there is no explicit allowed rule for an address, and if there is a denied rule that fits the address, then it is denied.
The "white" and "black" peer IP ranges can be dynamically changed in the database.
--pidfile File name to store the pid of the process. Default is /var/run/turnserver.pid (if superuser account is used) or /var/tmp/turnserver.pid .
--proc-user	User name to run the process. After the initialization, the turnserver process will make an attempt to change the current user ID to that user.
--proc-group	Group name to run the process. After the initialization, the turnserver process will make an attempt to change the current group ID to that group.
--cli-ip Local system IP address to be used for CLI management interface. The turnserver process accepts telnet client connections at this IP address and on the CLI port (see the next parameter). Default IP value is 127.0.0.1, port 5766. You can use telnet or putty (in telnet mode) to access the CLI management interface. See also the parameter --no-cli.
--cli-port CLI management interface listening port. Default is 5766.
--cli-password CLI access password. Default is empty (no password).
--cli-max-output-sessions Maximum number of output sessions in ps CLI command. This value can be changed on-the-fly in CLI. The default value is 256.
--ne=[1|2|3] Set network engine type for the process (for internal purposes).
PERFORMACE OPTIMIZATION AND LOAD BALANCE
PERFORMACE OPTIMIZATION AND LOAD BALANCE WIKI PAGE

WEBRTC USAGE
This is a set of notes for the WebRTC users:

WebRTC uses long-term credentials mechanism, so you have to use -a option (or --lt-cred-mech). WebRTC relaying will not work with anonymous access or with short-term credentials. 
With -a option, do not forget to set the realm (-r option). You will also have to set up the user accounts, for that you have a number of options (see also the DATABASES section below):
command-line options (-u).
userdb config file.
database table (if PostgreSQL or MySQL used). You will have to set keys with turnadmin utility (see docs and wiki for turnadmin). You cannot use open passwords in the database.
Redis key/value pair(s), if Redis is used. You key use either keys or open passwords with Redis; see turndb/testredisdbsetup.sh file.
you also can use the TURN REST API (see docs). You will need shared secret(s) set either	through the command line option, or through the config file, or through the database table (PostgreSQL or MySQL), or through the Redis database.
Usually WebRTC uses fingerprinting (-f).
-v option may be nice to see the connected clients.
-X is needed if you are running your TURN server behind a NAT.
--min-port and --max-port may be needed if you want to limit the relay endpoints ports number range.
TURN REST API
In WebRTC, the browser obtains the TURN connection information from the web server. This information is a secure information - because it contains the necessary TURN credentials.
As these credentials are transmitted over the public networks, we have a potential security problem.
If we have to transmit a valuable information over the public network, then this information has to have a limited lifetime.
Then the guy who obtains this information without permission will be able to perform only limited damage.
This is how the idea of time-limited TURN credentials appeared. This security mechanism is based upon the long-term credentials mechanism.
The main idea is that the web server provides the credentials to the client, but those credentials can be used only limited time by an application that has to create a TURN server connection.
It is assumed that a sort of REST API will be used between the WebRTC clients, WebRTC management console and WebRTC web server to handle the temporary passwords and
 the (relatively) persistent shared secret. 
The TURN Server provide support, from the TURN side, for that REST API. Strictly speaking, the TURN Server does not implement the REST API; it just provides a support for it.

The "classic" long-term credentials mechanism (LTCM) is described here:

http://tools.ietf.org/html/rfc5389#section-10.2

http://tools.ietf.org/html/rfc5389#section-15.4

For authentication, each user must know two things: the username and the password. The nonce and the realm values are supplied by the TURN server.
But LTCM is not saying anything about the nature and about the persistence of the username and of the password; and this is used by the REST API.

In the TURN REST API, there is no persistent passwords for users. A user has just the username. The password is always temporary, and it is generated by the web server on-demand, when the user accesses the WebRTC page. And, actually, a temporary one-time session only, username is provided to the user, too.

The temporary user is generated as:

temporary-username="timestamp" + ":" + "username"

where username is the persistent user name, and the timestamp format is just seconds sinse 1970 - the same value as time(NULL) function returns. The timestamp is the expiration time of the temporary password.

The temporary password is obtained as HMAC-SHA1 function over the temporary username, with shared secret as the HMAC key, and then the result is encoded:

temporary-password = base64_encode(hmac-sha1(shared-secret, temporary-username))

Both the TURN server and the web server know the same shared secret. How the shared secret is distributed among the involved entities is left to the WebRTC deployment details - this is beyond the scope of the TURN REST API.

So, a timestamp is used for the temporary password calculation, and this timestamp can be retrieved from the temporary username. This information is valuable, but only temporary, while the timestamp is not expired. Without knowledge of the shared secret, a new temporary password cannot be generated.

This is all formally described in Justin Uberti TURN REST API draft specs document that can be obtained here: TURN REST API BEHAVE DRAFT SPECS

Once the temporary username and password are obtained by the client (browser) application, then the rest is just 'classic" long-term credentials mechanism. For developers, we are going to describe it step-by-step below:

a new TURN client sends a request command to the TURN server.
TURN server sees that this is a new client and the message is not authenticated.
the TURN server generates a random nonce string, and return the error 401 to the client, with nonce and realm included.
the client sees the 401 error and it extracts two values from the error response: the nonce and the realm.
the client uses username, realm and password to produce a key: key = MD5(username ":" realm ":" SASLprep(password)) (SASLprep is described here: http://tools.ietf.org/html/rfc4013)
the client forms a new request, adds username, realm and nonce to the request. Then, the client calculates and adds the integrity field to the request. This is the trickiest part of the process, and it is described in the end of section 15.4: http://tools.ietf.org/html/rfc5389#section-15.4
the client, optionally, adds the fingerprint field. This may be also a tricky procedure, described in section 15.5 of the same document. WebRTC usually uses fingerprinted TURN messages.
the TURN server receives the request, reads the username.
then the TURN server checks that the nonce and the realm in the request are the valid ones.
then the TURN server calculates the key.
then the TURN server calculates the integrity field.
then the TURN server compares the calculated integrity field with the received one - they must be the same. If the integrity fields differ, then the request is rejected.
In subsequent communications, the client may go with exactly the same sequence, but for optimization usually the client, having already information about realm and nonce, pre-calculates the integrity string for each request, so that the 401 error response becomes unnecessary. The TURN server may use "--stale-nonce" option for extra security: in some time, the nonce expires and the client will obtain 438 error response with the new nonce, and the client will have to start using the new nonce.

In subsequent communications, the sever and the client will always assume the same password - the original password becomes the session parameter and is never expiring. So the password is not changing while the session is valid and unexpired. So, if the session is properly maintained, it may go forever, even if the user password has been already changed (in the database). The session simply is using the old password. Once the session got disconnected, the client will have to use the new password to re-connect (if the password has been changed).

An example when a new shared secret is generated every hour by the TURN server box and then supplied to the web server, remotely, is provided in the script examples/scripts/restapi/shared_secret_maintainer.pl .

A very important thing is that the nonce must be totally random and it must be different for different clients and different sessions.

DATABASES
For the user database, the turnserver has the following options:

Users can be set in the command line, with multiple -u or --user options. Obviously, only a few users can be set that way, and their credentials are fixed for the turnserver process lifetime.
Users can be set in turnusers.conf flat file DB. The turnserver process periodically re-reads this file, so the user accounts may be changed while the turnserver is running. But still a relatively small (up to a hundred ?) number of users can be handled that way.
Users can be stored in PostgreSQL database, if the turnserver was compiled with PostgreSQL support. Each time turnserver checks user credentials, it reads the database (asynchronously, of course, so that the current flow of packets is not delayed in any way), so any change in the database content is immediately visible by the turnserver. This is the way if you need the best scalability. The schema for the SQL database can be found in schema.sql file:
CREATE TABLE turnusers_lt (
    name varchar(512) PRIMARY KEY,
    hmackey char(32)
);

CREATE TABLE turnusers_st (
    name varchar(512) PRIMARY KEY,
    password varchar(512)
);

CREATE TABLE turn_secret (
    value varchar(512)
);

CREATE TABLE allowed_peer_ip (
        ip_range varchar(256)
);

CREATE TABLE denied_peer_ip (
        ip_range varchar(256)
);
For long-term credentials, you have to set the "keys" for the users; the "keys" are generated by the turnadmin utility. For the key generation, you need username, password and the realm. All users in the database must use the same realm value; if down the road you will decide to change the realm name, then you will have to re-generate all user keys (that can be done in a batch script). If you are using short-term credentials, then you use open passwords in the database; you will have to make sure that nobody can access the database outside of the TURN server box.
4. The same as previous is applicable to a MySQL database. The same schema file is used. The same considerations are valid.
5. The same is true for the Redis database, but the Redis database has a different schema - it can be found (in the form of explanation) in schema.userdb.redis. Example of a redis database setup commands (for users ninefingers and gorst, with realm set as north.gov in the config file; the database is set for both long-term and short-term auth mechanisms; the database can be used for REST API, too - shared secret is set; and denied and allowed IP ranges are set, also):
$ redis-cli <<!

SELECT 0
AUTH turn

set turn/user/ninefingers/key "bc807ee29df3c9ffa736523fb2c4e8ee"
set turn/user/gorst/key "7da2270ccfa49786e0115366d3a3d14d"

set turn/user/ninefingers/password "youhavetoberealistic"
set turn/user/gorst/password "hero"

set turn/secret/1368426581 "logen"

set turn/denied-peer-ip/123456 "172.17.13.133-172.17.14.56"
set turn/denied-peer-ip/234567 "123::45"

set turn/allowed-peer-ip/345678 "172.17.13.200"

save

!
In the Redis user database, you can store both "keys" and open passwords (for long term credentials) - the "open password" option is less secure but more convenient for low-security environments. For short-term credentials, you will use open passwords only. See also the file turndb/testredisdbsetup.sh.
6. Of course, the turnserver can be used in non-secure mode, when users are allowed to establish sessions anonymously. Then you do not need a database at all. But some TURN client (like WebRTC clients) are not able to work in anonymous mode, without an authentication mechanism.
For the status and statistics database, there are two choices:

The simplest choice is not to use it. Do not set --redis-statsdb option, and this functionality will be simply ignored.
If you choose to use the statistics database, then set the --redis-statsdb option. This may be the same database as in --redis-userdb option, or it may be a different database. You may want to use different database for security or convenience reasons. Also, you can use different database management systems for the user database and for the status and statistics database. For example, you can use MySQL as the user database, and you can use Redis for the statistics. Or you can use Redis for both. The stats database is described in turndb/schema.stats.redis.
So, we have 6 choices for the user management, and 2 choices for the statistics management. These two are totally independent. So, you have overall 6*2=12 ways to handle persistent information, choose any for your convenience.

You do not have to handle the database information "manually" - the turnadmin program can handle everything for you. For PostgreSQL and MySQL you will just have to create an empty database with schema.sql SQL script. With Redis, you do not have to do even that - just run turnadmin and it will set the users for you (see the turnadmin manuals).

KEEP ALIVE
The "keep alive" functionality can be implemented in several ways:

For the HTTP-style "keep-alive", the TCP listening endpoints (default ports 3478 and 5349) are able to accept HTTP GET request and reply with HTTP 200 OK response.
On UDP listening endpoints, STUN BINDING indication or STUN BINDING request can be used as stateless "keep-alive" communication dialog.
TELNET CLI
The turnserver process provides a telnet CLI access as statistics and basic management interface. By default, the turnserver starts a telnet CLI listener on IP 127.0.0.1 and port 5766. That can be changed by the command-cline options of the turnserver process (see --cli-ip and --cli-port options). The full list of telnet CLI commands is provided in "help" command output in the telnet CLI.

SHA256 extension
The existing STUN/TURN standards require HMAC-SHA1 function for the message integrity digest calculation, and MD5 for the password hash (key) calculation. As an extension for stronger protection, optionally, this server can use (with option --sha256) HMAC-SHA256 for the message integrity digest calculation, and SHA256 for the password hash (key) calculation. Of course, the TURN client has to implement the same extension.

TURN connection with Proxy
In an Enterprise environment when a Proxy is used for the Internet connections, the TURN connection handling has some specifics. The discussion about the matter can be found here:

TURN and Proxy